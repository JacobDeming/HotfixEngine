"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var Rx_1 = require('rxjs/Rx');
var angularfire2_1 = require('angularfire2');
var TimerComponent = (function () {
    function TimerComponent(af) {
        var _this = this;
        this.URL = window.location.href;
        this.firebaseServer = af.database.object('/' + this.URL.split('/game/')[1], { preserveSnapshot: true });
        this.firebaseServer.subscribe(function (snap) {
            _this.player1Action = snap.val().Players.player1.lastRound;
            _this.player2Action = snap.val().Players.player2.lastRound;
            _this.playersInfo = snap.val().Players;
            _this.environmentInfo = snap.val().Globals.Environment;
            if (_this.playersInfo.player1.currentHitpoints <= 0) {
                _this.winner = _this.playersInfo.player2.playerClass + " IS THE WINNER!";
                _this.firebaseServer.update({ Ready: 0 });
                _this.ready = false;
            }
            if (_this.playersInfo.player2.currentHitpoints <= 0) {
                _this.winner = _this.playersInfo.player1.playerClass + " IS THE WINNER!";
                _this.firebaseServer.update({ Ready: 0 });
                _this.ready = false;
            }
            if (_this.playersInfo.player1.currentHitpoints <= 0 && _this.playersInfo.player2.currentHitpoints <= 0) {
                _this.winner = _this.playersInfo.player1.playerClass + " AND " + _this.playersInfo.player2.playerClass + " TIED!";
                _this.firebaseServer.update({ Ready: 0 });
                _this.ready = false;
            }
            ;
        });
        this.firebaseClock = af.database.object('/' + this.URL.split('/game/')[1] + "/Timer", { preserveSnapshot: true });
        this.firebaseClock.subscribe(function (snap) {
            _this.remaining = snap.val();
        });
        var readyToStart = af.database.object('/' + this.URL.split('/game/')[1] + "/Ready", { preserveSnapshot: true });
        readyToStart.subscribe(function (snap) {
            _this.playersReady = snap.val();
            if (snap.val() >= 2) {
                _this.resetClock();
                _this.runClock();
            }
        });
    }
    TimerComponent.prototype.resetClock = function () {
        if (this.host == true) {
            this.gameClock = {
                duration: 5,
                ticks: 0
            };
        }
    };
    TimerComponent.prototype.stopClock = function () {
        if (this.host == true) {
            this.resetClock();
            this.timerSubscription.unsubscribe();
            this.fight(this.playersInfo.player1, this.playersInfo.player2);
        }
    };
    TimerComponent.prototype.runClock = function () {
        var _this = this;
        if (this.host == true) {
            var timer = Rx_1.Observable.timer(0, 1000);
            this.timerSubscription = timer.subscribe(function (t) {
                if (t <= _this.gameClock.duration) {
                    _this.gameClock.ticks = t;
                    _this.firebaseServer.update({ Timer: _this.gameClock.duration - _this.gameClock.ticks });
                }
                else {
                    _this.stopClock();
                }
            });
        }
    };
    TimerComponent.prototype.fight = function (player1, player2) {
        player1.lastRound = "";
        player2.lastRound = "";
        if (player1.action == "strike") {
            if (Math.floor(Math.random() * (100 - 0 + 1) + 1) > player2.dexterity) {
                if (player2.action == "defend") {
                    player2.currentHitpoints -= (player1.physicalAttack - player2.physicalDefense * 2);
                    player1.lastRound = player1.playerClass + " STRUCK FOR " + (player1.physicalAttack - player2.physicalDefense * 2) + " DAMAGE!";
                    player2.lastRound = player2.playerClass + " DEFENDED!";
                }
                else {
                    player2.currentHitpoints -= (player1.physicalAttack - player2.physicalDefense);
                    player1.lastRound = player1.playerClass + " STRUCK FOR " + (player1.physicalAttack - player2.physicalDefense) + " DAMAGE!";
                }
            }
            else {
                player1.lastRound = player1.playerClass + " ATTEMPTED TO STRIKE... BUT THE " + player2.playerClass + " DODGED!";
            }
        }
        if (player1.action == "special") {
            if (Math.floor(Math.random() * (100 - 0 + 1) + 1) > player2.dexterity) {
                if (player2.action == "defend") {
                    player2.currentHitpoints -= (player1.specialAttack - player2.specialDefense * 2);
                    player1.lastRound = player1.playerClass + " USED THEIR SPECIAL FOR " + (player1.specialAttack - player2.specialDefense * 2) + " DAMAGE!";
                    player2.lastRound = player2.playerClass + " DEFENDED!";
                }
                else {
                    player2.currentHitpoints -= (player1.specialAttack - player2.specialDefense);
                    player1.lastRound = player1.playerClass + " USED THEIR SPECIAL FOR " + (player1.specialAttack - player2.specialDefense) + " DAMAGE!";
                }
            }
            else {
                player1.lastRound = player1.playerClass + " ATTEMPTED TO USE THEIR SPECIAL... BUT THE " + player2.playerClass + " DODGED!";
            }
        }
        if (player2.action == "strike") {
            if (Math.floor(Math.random() * (100 - 0 + 1) + 1) > player1.dexterity) {
                if (player1.action == "defend") {
                    player1.currentHitpoints -= (player2.physicalAttack - player1.physicalDefense * 2);
                    player2.lastRound = player2.playerClass + " STRUCK FOR " + (player2.physicalAttack - player1.physicalDefense * 2) + " DAMAGE!";
                    player1.lastRound = player1.playerClass + " DEFENDED!";
                }
                else {
                    player1.currentHitpoints -= (player2.physicalAttack - player1.physicalDefense);
                    player2.lastRound = player2.playerClass + " STRUCK FOR " + (player2.physicalAttack - player1.physicalDefense) + " DAMAGE!";
                }
            }
            else {
                player2.lastRound = player2.playerClass + " ATTEMPTED TO STRIKE...BUT THE " + player1.playerClass + " DODGED!";
            }
        }
        if (player2.action == "special") {
            if (Math.floor(Math.random() * (100 - 0 + 1) + 1) > player1.dexterity) {
                if (player1.action == "defend") {
                    player1.currentHitpoints -= (player2.specialAttack - player1.specialDefense * 2);
                    player2.lastRound = player2.playerClass + " USED THEIR SPECIAL FOR " + (player2.specialAttack - player1.specialDefense * 2) + " DAMAGE!";
                    player1.lastRound = player1.playerClass + " DEFENDED!";
                }
                else {
                    player1.currentHitpoints -= (player2.specialAttack - player1.specialDefense);
                    player2.lastRound = player2.playerClass + " USED THEIR SPECIAL FOR " + (player2.specialAttack - player1.specialDefense) + " DAMAGE!";
                }
            }
            else {
                player2.lastRound = player2.playerClass + " ATTEMPTED TO USE THEIR SPECIAL... BUT THE " + player1.playerClass + " DODGED!";
            }
        }
        this.firebaseServer.update({ Players: { player1: this.playersInfo.player1, player2: this.playersInfo.player2 } });
        if (player1.currentHitpoints <= 0) {
            return;
        }
        if (player2.currentHitpoints <= 0) {
            return;
        }
        else {
            this.runClock();
        }
    };
    TimerComponent.prototype.readyToPlay = function () {
        this.ready = true;
        if (this.playersReady === 0) {
            this.host = true;
        }
        else {
            this.host = false;
        }
        this.firebaseServer.update({ Ready: this.playersReady + 1 });
    };
    TimerComponent.prototype.playAgain = function () {
        this.ready = true;
        if (this.playersInfo.player1.playerClass == "Highwayman") {
            this.playersInfo.player1.currentHitpoints = 80;
        }
        if (this.playersInfo.player1.playerClass == "Elementalist") {
            this.playersInfo.player1.currentHitpoints = 50;
        }
        if (this.playersInfo.player1.playerClass == "Paragon") {
            this.playersInfo.player1.currentHitpoints = 100;
        }
        if (this.playersInfo.player2.playerClass == "Highwayman") {
            this.playersInfo.player2.currentHitpoints = 80;
        }
        if (this.playersInfo.player2.playerClass == "Elementalist") {
            this.playersInfo.player2.currentHitpoints = 50;
        }
        if (this.playersInfo.player2.playerClass == "Paragon") {
            this.playersInfo.player2.currentHitpoints = 100;
        }
        this.firebaseServer.update({ Players: this.playersInfo });
        this.firebaseServer.update({ Ready: this.playersReady + 1 });
    };
    TimerComponent = __decorate([
        core_1.Component({
            selector: 'timer',
            template: "\n  <div class=\"timer-container text-center\">\n    <div *ngIf=\"ready!=true && winner==null\">\n      <button class=\"btn readyBtn\" (click)=\"readyToPlay()\">Ready to Play?</button>\n    </div>\n    <div *ngIf=\"ready==true && playersReady%2!=0\">\n      <p class=\"time-text text-center\"> WAITING ON SECOND PLAYER</p>\n    </div>\n    <div *ngIf=\"playersReady%2==0 && playersReady!=0\">\n      <p class=\"time-text text-center\">ROUND ENDS IN...</p>\n      <p class=\"clock text-center\">{{remaining}}</p>\n      <p class=\"text-center\">{{player1Action}}</p>\n      <p class=\"text-center\">{{player2Action}}</p>\n    </div>\n    <div *ngIf=\"winner!=null && ready!=true\">\n      <p class=\"text-center time-text\">\n        {{winner}}\n      </p>\n      <button class=\"btn readyBtn\" (click)=\"playAgain()\">Play Again?</button>\n  </div>\n  ",
            styles: ["\n  .readyBtn {\n    background-color: #29B0AE;\n    border: none;\n    color: #FFF;\n    font-family: 'Bangers', cursive;\n    font-size: 18px;\n    font-weight: normal;\n    margin: 0;\n    padding: 10px 20px;\n    text-transform: uppercase;\n    text-decoration: none;\n  }\n  .readyBtn:hover {\n    background-color: #235552;\n    transition: all .4s\n  }\n  "]
        }), 
        __metadata('design:paramtypes', [angularfire2_1.AngularFire])
    ], TimerComponent);
    return TimerComponent;
}());
exports.TimerComponent = TimerComponent;

//# sourceMappingURL=data:application/json;base64,
