{"version":3,"file":"html_lexer.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/html_lexer.ts"],"names":[],"mappings":"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","sourcesContent":["import {ListWrapper} from './facade/collection';\nimport {NumberWrapper, StringWrapper, isBlank, isPresent} from './facade/lang';\nimport {HtmlTagContentType, NAMED_ENTITIES, getHtmlTagDefinition} from './html_tags';\nimport {ParseError, ParseLocation, ParseSourceFile, ParseSourceSpan} from './parse_util';\n\nexport enum HtmlTokenType {\n  TAG_OPEN_START,\n  TAG_OPEN_END,\n  TAG_OPEN_END_VOID,\n  TAG_CLOSE,\n  TEXT,\n  ESCAPABLE_RAW_TEXT,\n  RAW_TEXT,\n  COMMENT_START,\n  COMMENT_END,\n  CDATA_START,\n  CDATA_END,\n  ATTR_NAME,\n  ATTR_VALUE,\n  DOC_TYPE,\n  EXPANSION_FORM_START,\n  EXPANSION_CASE_VALUE,\n  EXPANSION_CASE_EXP_START,\n  EXPANSION_CASE_EXP_END,\n  EXPANSION_FORM_END,\n  EOF\n}\n\nexport class HtmlToken {\n  constructor(\n      public type: HtmlTokenType, public parts: string[], public sourceSpan: ParseSourceSpan) {}\n}\n\nexport class HtmlTokenError extends ParseError {\n  constructor(errorMsg: string, public tokenType: HtmlTokenType, span: ParseSourceSpan) {\n    super(span, errorMsg);\n  }\n}\n\nexport class HtmlTokenizeResult {\n  constructor(public tokens: HtmlToken[], public errors: HtmlTokenError[]) {}\n}\n\nexport function tokenizeHtml(\n    sourceContent: string, sourceUrl: string,\n    tokenizeExpansionForms: boolean = false): HtmlTokenizeResult {\n  return new _HtmlTokenizer(new ParseSourceFile(sourceContent, sourceUrl), tokenizeExpansionForms)\n      .tokenize();\n}\n\nconst $EOF = 0;\nconst $TAB = 9;\nconst $LF = 10;\nconst $FF = 12;\nconst $CR = 13;\n\nconst $SPACE = 32;\n\nconst $BANG = 33;\nconst $DQ = 34;\nconst $HASH = 35;\nconst $$ = 36;\nconst $AMPERSAND = 38;\nconst $SQ = 39;\nconst $MINUS = 45;\nconst $SLASH = 47;\nconst $0 = 48;\n\nconst $SEMICOLON = 59;\n\nconst $9 = 57;\nconst $COLON = 58;\nconst $LT = 60;\nconst $EQ = 61;\nconst $GT = 62;\nconst $QUESTION = 63;\nconst $LBRACKET = 91;\nconst $RBRACKET = 93;\nconst $LBRACE = 123;\nconst $RBRACE = 125;\nconst $COMMA = 44;\nconst $A = 65;\nconst $F = 70;\nconst $X = 88;\nconst $Z = 90;\n\nconst $a = 97;\nconst $f = 102;\nconst $z = 122;\nconst $x = 120;\n\nconst $NBSP = 160;\n\nvar CR_OR_CRLF_REGEXP = /\\r\\n?/g;\n\nfunction unexpectedCharacterErrorMsg(charCode: number): string {\n  var char = charCode === $EOF ? 'EOF' : StringWrapper.fromCharCode(charCode);\n  return `Unexpected character \"${char}\"`;\n}\n\nfunction unknownEntityErrorMsg(entitySrc: string): string {\n  return `Unknown entity \"${entitySrc}\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax`;\n}\n\nclass ControlFlowError {\n  constructor(public error: HtmlTokenError) {}\n}\n\n// See http://www.w3.org/TR/html51/syntax.html#writing\nclass _HtmlTokenizer {\n  private _input: string;\n  private _length: number;\n  // Note: this is always lowercase!\n  private _peek: number = -1;\n  private _nextPeek: number = -1;\n  private _index: number = -1;\n  private _line: number = 0;\n  private _column: number = -1;\n  private _currentTokenStart: ParseLocation;\n  private _currentTokenType: HtmlTokenType;\n  private _expansionCaseStack: HtmlTokenType[] = [];\n\n  tokens: HtmlToken[] = [];\n  errors: HtmlTokenError[] = [];\n\n  constructor(private file: ParseSourceFile, private tokenizeExpansionForms: boolean) {\n    this._input = file.content;\n    this._length = file.content.length;\n    this._advance();\n  }\n\n  private _processCarriageReturns(content: string): string {\n    // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream\n    // In order to keep the original position in the source, we can not\n    // pre-process it.\n    // Instead CRs are processed right before instantiating the tokens.\n    return StringWrapper.replaceAll(content, CR_OR_CRLF_REGEXP, '\\n');\n  }\n\n  tokenize(): HtmlTokenizeResult {\n    while (this._peek !== $EOF) {\n      var start = this._getLocation();\n      try {\n        if (this._attemptCharCode($LT)) {\n          if (this._attemptCharCode($BANG)) {\n            if (this._attemptCharCode($LBRACKET)) {\n              this._consumeCdata(start);\n            } else if (this._attemptCharCode($MINUS)) {\n              this._consumeComment(start);\n            } else {\n              this._consumeDocType(start);\n            }\n          } else if (this._attemptCharCode($SLASH)) {\n            this._consumeTagClose(start);\n          } else {\n            this._consumeTagOpen(start);\n          }\n        } else if (\n            isExpansionFormStart(this._peek, this._nextPeek) && this.tokenizeExpansionForms) {\n          this._consumeExpansionFormStart();\n\n        } else if (\n            isExpansionCaseStart(this._peek) && this._isInExpansionForm() &&\n            this.tokenizeExpansionForms) {\n          this._consumeExpansionCaseStart();\n\n        } else if (\n            this._peek === $RBRACE && this._isInExpansionCase() && this.tokenizeExpansionForms) {\n          this._consumeExpansionCaseEnd();\n\n        } else if (\n            this._peek === $RBRACE && this._isInExpansionForm() && this.tokenizeExpansionForms) {\n          this._consumeExpansionFormEnd();\n\n        } else {\n          this._consumeText();\n        }\n      } catch (e) {\n        if (e instanceof ControlFlowError) {\n          this.errors.push(e.error);\n        } else {\n          throw e;\n        }\n      }\n    }\n    this._beginToken(HtmlTokenType.EOF);\n    this._endToken([]);\n    return new HtmlTokenizeResult(mergeTextTokens(this.tokens), this.errors);\n  }\n\n  private _getLocation(): ParseLocation {\n    return new ParseLocation(this.file, this._index, this._line, this._column);\n  }\n\n  private _getSpan(start?: ParseLocation, end?: ParseLocation): ParseSourceSpan {\n    if (isBlank(start)) {\n      start = this._getLocation();\n    }\n    if (isBlank(end)) {\n      end = this._getLocation();\n    }\n    return new ParseSourceSpan(start, end);\n  }\n\n  private _beginToken(type: HtmlTokenType, start: ParseLocation = null) {\n    if (isBlank(start)) {\n      start = this._getLocation();\n    }\n    this._currentTokenStart = start;\n    this._currentTokenType = type;\n  }\n\n  private _endToken(parts: string[], end: ParseLocation = null): HtmlToken {\n    if (isBlank(end)) {\n      end = this._getLocation();\n    }\n    var token = new HtmlToken(\n        this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));\n    this.tokens.push(token);\n    this._currentTokenStart = null;\n    this._currentTokenType = null;\n    return token;\n  }\n\n  private _createError(msg: string, span: ParseSourceSpan): ControlFlowError {\n    var error = new HtmlTokenError(msg, this._currentTokenType, span);\n    this._currentTokenStart = null;\n    this._currentTokenType = null;\n    return new ControlFlowError(error);\n  }\n\n  private _advance() {\n    if (this._index >= this._length) {\n      throw this._createError(unexpectedCharacterErrorMsg($EOF), this._getSpan());\n    }\n    if (this._peek === $LF) {\n      this._line++;\n      this._column = 0;\n    } else if (this._peek !== $LF && this._peek !== $CR) {\n      this._column++;\n    }\n    this._index++;\n    this._peek =\n        this._index >= this._length ? $EOF : StringWrapper.charCodeAt(this._input, this._index);\n    this._nextPeek = this._index + 1 >= this._length ?\n        $EOF :\n        StringWrapper.charCodeAt(this._input, this._index + 1);\n  }\n\n  private _attemptCharCode(charCode: number): boolean {\n    if (this._peek === charCode) {\n      this._advance();\n      return true;\n    }\n    return false;\n  }\n\n  private _attemptCharCodeCaseInsensitive(charCode: number): boolean {\n    if (compareCharCodeCaseInsensitive(this._peek, charCode)) {\n      this._advance();\n      return true;\n    }\n    return false;\n  }\n\n  private _requireCharCode(charCode: number) {\n    var location = this._getLocation();\n    if (!this._attemptCharCode(charCode)) {\n      throw this._createError(\n          unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));\n    }\n  }\n\n  private _attemptStr(chars: string): boolean {\n    var indexBeforeAttempt = this._index;\n    var columnBeforeAttempt = this._column;\n    var lineBeforeAttempt = this._line;\n    for (var i = 0; i < chars.length; i++) {\n      if (!this._attemptCharCode(StringWrapper.charCodeAt(chars, i))) {\n        // If attempting to parse the string fails, we want to reset the parser\n        // to where it was before the attempt\n        this._index = indexBeforeAttempt;\n        this._column = columnBeforeAttempt;\n        this._line = lineBeforeAttempt;\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private _attemptStrCaseInsensitive(chars: string): boolean {\n    for (var i = 0; i < chars.length; i++) {\n      if (!this._attemptCharCodeCaseInsensitive(StringWrapper.charCodeAt(chars, i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private _requireStr(chars: string) {\n    var location = this._getLocation();\n    if (!this._attemptStr(chars)) {\n      throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));\n    }\n  }\n\n  private _attemptCharCodeUntilFn(predicate: Function) {\n    while (!predicate(this._peek)) {\n      this._advance();\n    }\n  }\n\n  private _requireCharCodeUntilFn(predicate: Function, len: number) {\n    var start = this._getLocation();\n    this._attemptCharCodeUntilFn(predicate);\n    if (this._index - start.offset < len) {\n      throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));\n    }\n  }\n\n  private _attemptUntilChar(char: number) {\n    while (this._peek !== char) {\n      this._advance();\n    }\n  }\n\n  private _readChar(decodeEntities: boolean): string {\n    if (decodeEntities && this._peek === $AMPERSAND) {\n      return this._decodeEntity();\n    } else {\n      var index = this._index;\n      this._advance();\n      return this._input[index];\n    }\n  }\n\n  private _decodeEntity(): string {\n    var start = this._getLocation();\n    this._advance();\n    if (this._attemptCharCode($HASH)) {\n      let isHex = this._attemptCharCode($x) || this._attemptCharCode($X);\n      let numberStart = this._getLocation().offset;\n      this._attemptCharCodeUntilFn(isDigitEntityEnd);\n      if (this._peek != $SEMICOLON) {\n        throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n      }\n      this._advance();\n      let strNum = this._input.substring(numberStart, this._index - 1);\n      try {\n        let charCode = NumberWrapper.parseInt(strNum, isHex ? 16 : 10);\n        return StringWrapper.fromCharCode(charCode);\n      } catch (e) {\n        let entity = this._input.substring(start.offset + 1, this._index - 1);\n        throw this._createError(unknownEntityErrorMsg(entity), this._getSpan(start));\n      }\n    } else {\n      let startPosition = this._savePosition();\n      this._attemptCharCodeUntilFn(isNamedEntityEnd);\n      if (this._peek != $SEMICOLON) {\n        this._restorePosition(startPosition);\n        return '&';\n      }\n      this._advance();\n      let name = this._input.substring(start.offset + 1, this._index - 1);\n      let char = (NAMED_ENTITIES as any)[name];\n      if (isBlank(char)) {\n        throw this._createError(unknownEntityErrorMsg(name), this._getSpan(start));\n      }\n      return char;\n    }\n  }\n\n  private _consumeRawText(\n      decodeEntities: boolean, firstCharOfEnd: number, attemptEndRest: Function): HtmlToken {\n    var tagCloseStart: ParseLocation;\n    var textStart = this._getLocation();\n    this._beginToken(\n        decodeEntities ? HtmlTokenType.ESCAPABLE_RAW_TEXT : HtmlTokenType.RAW_TEXT, textStart);\n    var parts: string[] = [];\n    while (true) {\n      tagCloseStart = this._getLocation();\n      if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {\n        break;\n      }\n      if (this._index > tagCloseStart.offset) {\n        parts.push(this._input.substring(tagCloseStart.offset, this._index));\n      }\n      while (this._peek !== firstCharOfEnd) {\n        parts.push(this._readChar(decodeEntities));\n      }\n    }\n    return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);\n  }\n\n  private _consumeComment(start: ParseLocation) {\n    this._beginToken(HtmlTokenType.COMMENT_START, start);\n    this._requireCharCode($MINUS);\n    this._endToken([]);\n    var textToken = this._consumeRawText(false, $MINUS, () => this._attemptStr('->'));\n    this._beginToken(HtmlTokenType.COMMENT_END, textToken.sourceSpan.end);\n    this._endToken([]);\n  }\n\n  private _consumeCdata(start: ParseLocation) {\n    this._beginToken(HtmlTokenType.CDATA_START, start);\n    this._requireStr('CDATA[');\n    this._endToken([]);\n    var textToken = this._consumeRawText(false, $RBRACKET, () => this._attemptStr(']>'));\n    this._beginToken(HtmlTokenType.CDATA_END, textToken.sourceSpan.end);\n    this._endToken([]);\n  }\n\n  private _consumeDocType(start: ParseLocation) {\n    this._beginToken(HtmlTokenType.DOC_TYPE, start);\n    this._attemptUntilChar($GT);\n    this._advance();\n    this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);\n  }\n\n  private _consumePrefixAndName(): string[] {\n    var nameOrPrefixStart = this._index;\n    var prefix: string = null;\n    while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {\n      this._advance();\n    }\n    var nameStart: number;\n    if (this._peek === $COLON) {\n      this._advance();\n      prefix = this._input.substring(nameOrPrefixStart, this._index - 1);\n      nameStart = this._index;\n    } else {\n      nameStart = nameOrPrefixStart;\n    }\n    this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);\n    var name = this._input.substring(nameStart, this._index);\n    return [prefix, name];\n  }\n\n  private _consumeTagOpen(start: ParseLocation) {\n    let savedPos = this._savePosition();\n    let lowercaseTagName: string;\n    try {\n      if (!isAsciiLetter(this._peek)) {\n        throw this._createError(unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n      }\n      var nameStart = this._index;\n      this._consumeTagOpenStart(start);\n      lowercaseTagName = this._input.substring(nameStart, this._index).toLowerCase();\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      while (this._peek !== $SLASH && this._peek !== $GT) {\n        this._consumeAttributeName();\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        if (this._attemptCharCode($EQ)) {\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._consumeAttributeValue();\n        }\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n      }\n      this._consumeTagOpenEnd();\n    } catch (e) {\n      if (e instanceof ControlFlowError) {\n        // When the start tag is invalid, assume we want a \"<\"\n        this._restorePosition(savedPos);\n        // Back to back text tokens are merged at the end\n        this._beginToken(HtmlTokenType.TEXT, start);\n        this._endToken(['<']);\n        return;\n      }\n\n      throw e;\n    }\n\n    var contentTokenType = getHtmlTagDefinition(lowercaseTagName).contentType;\n    if (contentTokenType === HtmlTagContentType.RAW_TEXT) {\n      this._consumeRawTextWithTagClose(lowercaseTagName, false);\n    } else if (contentTokenType === HtmlTagContentType.ESCAPABLE_RAW_TEXT) {\n      this._consumeRawTextWithTagClose(lowercaseTagName, true);\n    }\n  }\n\n  private _consumeRawTextWithTagClose(lowercaseTagName: string, decodeEntities: boolean) {\n    var textToken = this._consumeRawText(decodeEntities, $LT, () => {\n      if (!this._attemptCharCode($SLASH)) return false;\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      if (!this._attemptStrCaseInsensitive(lowercaseTagName)) return false;\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      if (!this._attemptCharCode($GT)) return false;\n      return true;\n    });\n    this._beginToken(HtmlTokenType.TAG_CLOSE, textToken.sourceSpan.end);\n    this._endToken([null, lowercaseTagName]);\n  }\n\n  private _consumeTagOpenStart(start: ParseLocation) {\n    this._beginToken(HtmlTokenType.TAG_OPEN_START, start);\n    var parts = this._consumePrefixAndName();\n    this._endToken(parts);\n  }\n\n  private _consumeAttributeName() {\n    this._beginToken(HtmlTokenType.ATTR_NAME);\n    var prefixAndName = this._consumePrefixAndName();\n    this._endToken(prefixAndName);\n  }\n\n  private _consumeAttributeValue() {\n    this._beginToken(HtmlTokenType.ATTR_VALUE);\n    var value: string;\n    if (this._peek === $SQ || this._peek === $DQ) {\n      var quoteChar = this._peek;\n      this._advance();\n      var parts: string[] = [];\n      while (this._peek !== quoteChar) {\n        parts.push(this._readChar(true));\n      }\n      value = parts.join('');\n      this._advance();\n    } else {\n      var valueStart = this._index;\n      this._requireCharCodeUntilFn(isNameEnd, 1);\n      value = this._input.substring(valueStart, this._index);\n    }\n    this._endToken([this._processCarriageReturns(value)]);\n  }\n\n  private _consumeTagOpenEnd() {\n    var tokenType = this._attemptCharCode($SLASH) ? HtmlTokenType.TAG_OPEN_END_VOID :\n                                                    HtmlTokenType.TAG_OPEN_END;\n    this._beginToken(tokenType);\n    this._requireCharCode($GT);\n    this._endToken([]);\n  }\n\n  private _consumeTagClose(start: ParseLocation) {\n    this._beginToken(HtmlTokenType.TAG_CLOSE, start);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    let prefixAndName = this._consumePrefixAndName();\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    this._requireCharCode($GT);\n    this._endToken(prefixAndName);\n  }\n\n  private _consumeExpansionFormStart() {\n    this._beginToken(HtmlTokenType.EXPANSION_FORM_START, this._getLocation());\n    this._requireCharCode($LBRACE);\n    this._endToken([]);\n\n    this._beginToken(HtmlTokenType.RAW_TEXT, this._getLocation());\n    let condition = this._readUntil($COMMA);\n    this._endToken([condition], this._getLocation());\n    this._requireCharCode($COMMA);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._beginToken(HtmlTokenType.RAW_TEXT, this._getLocation());\n    let type = this._readUntil($COMMA);\n    this._endToken([type], this._getLocation());\n    this._requireCharCode($COMMA);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._expansionCaseStack.push(HtmlTokenType.EXPANSION_FORM_START);\n  }\n\n  private _consumeExpansionCaseStart() {\n    this._beginToken(HtmlTokenType.EXPANSION_CASE_VALUE, this._getLocation());\n    let value = this._readUntil($LBRACE).trim();\n    this._endToken([value], this._getLocation());\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._beginToken(HtmlTokenType.EXPANSION_CASE_EXP_START, this._getLocation());\n    this._requireCharCode($LBRACE);\n    this._endToken([], this._getLocation());\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._expansionCaseStack.push(HtmlTokenType.EXPANSION_CASE_EXP_START);\n  }\n\n  private _consumeExpansionCaseEnd() {\n    this._beginToken(HtmlTokenType.EXPANSION_CASE_EXP_END, this._getLocation());\n    this._requireCharCode($RBRACE);\n    this._endToken([], this._getLocation());\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._expansionCaseStack.pop();\n  }\n\n  private _consumeExpansionFormEnd() {\n    this._beginToken(HtmlTokenType.EXPANSION_FORM_END, this._getLocation());\n    this._requireCharCode($RBRACE);\n    this._endToken([]);\n\n    this._expansionCaseStack.pop();\n  }\n\n  private _consumeText() {\n    var start = this._getLocation();\n    this._beginToken(HtmlTokenType.TEXT, start);\n\n    var parts: string[] = [];\n    let interpolation = false;\n\n    if (this._peek === $LBRACE && this._nextPeek === $LBRACE) {\n      parts.push(this._readChar(true));\n      parts.push(this._readChar(true));\n      interpolation = true;\n    } else {\n      parts.push(this._readChar(true));\n    }\n\n    while (!this._isTextEnd(interpolation)) {\n      if (this._peek === $LBRACE && this._nextPeek === $LBRACE) {\n        parts.push(this._readChar(true));\n        parts.push(this._readChar(true));\n        interpolation = true;\n      } else if (this._peek === $RBRACE && this._nextPeek === $RBRACE && interpolation) {\n        parts.push(this._readChar(true));\n        parts.push(this._readChar(true));\n        interpolation = false;\n      } else {\n        parts.push(this._readChar(true));\n      }\n    }\n    this._endToken([this._processCarriageReturns(parts.join(''))]);\n  }\n\n  private _isTextEnd(interpolation: boolean): boolean {\n    if (this._peek === $LT || this._peek === $EOF) return true;\n    if (this.tokenizeExpansionForms) {\n      if (isExpansionFormStart(this._peek, this._nextPeek)) return true;\n      if (this._peek === $RBRACE && !interpolation &&\n          (this._isInExpansionCase() || this._isInExpansionForm()))\n        return true;\n    }\n    return false;\n  }\n\n  private _savePosition(): number[] {\n    return [this._peek, this._index, this._column, this._line, this.tokens.length];\n  }\n\n  private _readUntil(char: number): string {\n    let start = this._index;\n    this._attemptUntilChar(char);\n    return this._input.substring(start, this._index);\n  }\n\n  private _restorePosition(position: number[]): void {\n    this._peek = position[0];\n    this._index = position[1];\n    this._column = position[2];\n    this._line = position[3];\n    let nbTokens = position[4];\n    if (nbTokens < this.tokens.length) {\n      // remove any extra tokens\n      this.tokens = ListWrapper.slice(this.tokens, 0, nbTokens);\n    }\n  }\n\n  private _isInExpansionCase(): boolean {\n    return this._expansionCaseStack.length > 0 &&\n        this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n        HtmlTokenType.EXPANSION_CASE_EXP_START;\n  }\n\n  private _isInExpansionForm(): boolean {\n    return this._expansionCaseStack.length > 0 &&\n        this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n        HtmlTokenType.EXPANSION_FORM_START;\n  }\n}\n\nfunction isNotWhitespace(code: number): boolean {\n  return !isWhitespace(code) || code === $EOF;\n}\n\nfunction isWhitespace(code: number): boolean {\n  return (code >= $TAB && code <= $SPACE) || (code === $NBSP);\n}\n\nfunction isNameEnd(code: number): boolean {\n  return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ ||\n      code === $EQ;\n}\n\nfunction isPrefixEnd(code: number): boolean {\n  return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);\n}\n\nfunction isDigitEntityEnd(code: number): boolean {\n  return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);\n}\n\nfunction isNamedEntityEnd(code: number): boolean {\n  return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);\n}\n\nfunction isExpansionFormStart(peek: number, nextPeek: number): boolean {\n  return peek === $LBRACE && nextPeek != $LBRACE;\n}\n\nfunction isExpansionCaseStart(peek: number): boolean {\n  return peek === $EQ || isAsciiLetter(peek);\n}\n\nfunction isAsciiLetter(code: number): boolean {\n  return code >= $a && code <= $z || code >= $A && code <= $Z;\n}\n\nfunction isAsciiHexDigit(code: number): boolean {\n  return code >= $a && code <= $f || code >= $A && code <= $F || code >= $0 && code <= $9;\n}\n\nfunction compareCharCodeCaseInsensitive(code1: number, code2: number): boolean {\n  return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);\n}\n\nfunction toUpperCaseCharCode(code: number): number {\n  return code >= $a && code <= $z ? code - $a + $A : code;\n}\n\nfunction mergeTextTokens(srcTokens: HtmlToken[]): HtmlToken[] {\n  let dstTokens: HtmlToken[] = [];\n  let lastDstToken: HtmlToken;\n  for (let i = 0; i < srcTokens.length; i++) {\n    let token = srcTokens[i];\n    if (isPresent(lastDstToken) && lastDstToken.type == HtmlTokenType.TEXT &&\n        token.type == HtmlTokenType.TEXT) {\n      lastDstToken.parts[0] += token.parts[0];\n      lastDstToken.sourceSpan.end = token.sourceSpan.end;\n    } else {\n      lastDstToken = token;\n      dstTokens.push(lastDstToken);\n    }\n  }\n\n  return dstTokens;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}