{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/di/decorators.ts"],"names":[],"mappings":"OAAO,EAAC,aAAa,EAAE,kBAAkB,EAAC,MAAM,oBAAoB;OAE7D,EAAC,YAAY,EAAE,cAAc,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,YAAY,EAAE,gBAAgB,EAAC,MAAM,YAAY;AAyD7H;;;GAGG;AACH,OAAO,IAAI,MAAM,GAA0B,kBAAkB,CAAC,cAAc,CAAC,CAAC;AAE9E;;;GAGG;AACH,OAAO,IAAI,QAAQ,GAA4B,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;AAEpF;;;GAGG;AACH,OAAO,IAAI,UAAU,GACU,aAAa,CAAC,kBAAkB,CAAC,CAAC;AAEjE;;;GAGG;AACH,OAAO,IAAI,IAAI,GAAwB,kBAAkB,CAAC,YAAY,CAAC,CAAC;AAExE;;;GAGG;AACH,OAAO,IAAI,IAAI,GAAwB,kBAAkB,CAAC,YAAY,CAAC,CAAC;AAExE;;;GAGG;AACH,OAAO,IAAI,QAAQ,GAA4B,kBAAkB,CAAC,gBAAgB,CAAC,CAAC","sourcesContent":["import {makeDecorator, makeParamDecorator} from '../util/decorators';\n\nimport {HostMetadata, InjectMetadata, InjectableMetadata, OptionalMetadata, SelfMetadata, SkipSelfMetadata} from './metadata';\n\n\n/**\n * Factory for creating {@link InjectMetadata}.\n * @stable\n */\nexport interface InjectMetadataFactory {\n  (token: any): any;\n  new (token: any): InjectMetadata;\n}\n\n/**\n * Factory for creating {@link OptionalMetadata}.\n * @stable\n */\nexport interface OptionalMetadataFactory {\n  (): any;\n  new (): OptionalMetadata;\n}\n\n/**\n * Factory for creating {@link InjectableMetadata}.\n * @stable\n */\nexport interface InjectableMetadataFactory {\n  (): any;\n  new (): InjectableMetadata;\n}\n\n/**\n * Factory for creating {@link SelfMetadata}.\n * @stable\n */\nexport interface SelfMetadataFactory {\n  (): any;\n  new (): SelfMetadata;\n}\n\n/**\n * Factory for creating {@link HostMetadata}.\n * @stable\n */\nexport interface HostMetadataFactory {\n  (): any;\n  new (): HostMetadata;\n}\n\n/**\n * Factory for creating {@link SkipSelfMetadata}.\n * @stable\n */\nexport interface SkipSelfMetadataFactory {\n  (): any;\n  new (): SkipSelfMetadata;\n}\n\n/**\n * Factory for creating {@link InjectMetadata}.\n * @stable\n */\nexport var Inject: InjectMetadataFactory = makeParamDecorator(InjectMetadata);\n\n/**\n * Factory for creating {@link OptionalMetadata}.\n * @stable\n */\nexport var Optional: OptionalMetadataFactory = makeParamDecorator(OptionalMetadata);\n\n/**\n * Factory for creating {@link InjectableMetadata}.\n * @stable\n */\nexport var Injectable: InjectableMetadataFactory =\n    <InjectableMetadataFactory>makeDecorator(InjectableMetadata);\n\n/**\n * Factory for creating {@link SelfMetadata}.\n * @stable\n */\nexport var Self: SelfMetadataFactory = makeParamDecorator(SelfMetadata);\n\n/**\n * Factory for creating {@link HostMetadata}.\n * @stable\n */\nexport var Host: HostMetadataFactory = makeParamDecorator(HostMetadata);\n\n/**\n * Factory for creating {@link SkipSelfMetadata}.\n * @stable\n */\nexport var SkipSelf: SkipSelfMetadataFactory = makeParamDecorator(SkipSelfMetadata);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}