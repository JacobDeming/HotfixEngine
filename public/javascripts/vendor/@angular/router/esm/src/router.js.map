{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/router.ts"],"names":[],"mappings":"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","sourcesContent":["import {Location} from '@angular/common';\nimport {BaseException, ComponentResolver, ReflectiveInjector, provide} from '@angular/core';\n\nimport {DEFAULT_OUTLET_NAME} from './constants';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {EventEmitter, Observable, ObservableWrapper, PromiseWrapper} from './facade/async';\nimport {ListWrapper, StringMapWrapper} from './facade/collection';\nimport {Type, isBlank, isPresent} from './facade/lang';\nimport {CanDeactivate} from './interfaces';\nimport {hasLifecycleHook} from './lifecycle_reflector';\nimport {link} from './link';\nimport {recognize} from './recognize';\nimport {RouterUrlSerializer} from './router_url_serializer';\nimport {RouteSegment, RouteTree, TreeNode, UrlSegment, UrlTree, createEmptyRouteTree, rootNode, routeSegmentComponentFactory, serializeRouteSegmentTree} from './segments';\n\nexport class RouterOutletMap {\n  /** @internal */\n  _outlets: {[name: string]: RouterOutlet} = {};\n  registerOutlet(name: string, outlet: RouterOutlet): void { this._outlets[name] = outlet; }\n}\n\n/**\n * The `Router` is responsible for mapping URLs to components.\n *\n * You can see the state of the router by inspecting the read-only fields `router.urlTree`\n * and `router.routeTree`.\n */\nexport class Router {\n  private _routeTree: RouteTree;\n  private _urlTree: UrlTree;\n  private _locationSubscription: any;\n  private _changes: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @internal\n   */\n  constructor(\n      private _rootComponent: Object, private _rootComponentType: Type,\n      private _componentResolver: ComponentResolver, private _urlSerializer: RouterUrlSerializer,\n      private _routerOutletMap: RouterOutletMap, private _location: Location) {\n    this._routeTree = createEmptyRouteTree(this._rootComponentType);\n    this._setUpLocationChangeListener();\n    this.navigateByUrl(this._location.path());\n  }\n\n  /**\n   * Returns the current url tree.\n   */\n  get urlTree(): UrlTree { return this._urlTree; }\n\n  /**\n   * Returns the current route tree.\n   */\n  get routeTree(): RouteTree { return this._routeTree; }\n\n  /**\n   * An observable or url changes from the router.\n   */\n  get changes(): Observable<void> { return this._changes; }\n\n  /**\n   * Navigate based on the provided url. This navigation is always absolute.\n   *\n   * ### Usage\n   *\n   * ```\n   * router.navigateByUrl(\"/team/33/user/11\");\n   * ```\n   */\n  navigateByUrl(url: string): Promise<void> {\n    return this._navigate(this._urlSerializer.parse(url));\n  }\n\n  /**\n   * Navigate based on the provided array of commands and a starting point.\n   * If no segment is provided, the navigation is absolute.\n   *\n   * ### Usage\n   *\n   * ```\n   * router.navigate(['team', 33, 'team', '11], segment);\n   * ```\n   */\n  navigate(commands: any[], segment?: RouteSegment): Promise<void> {\n    return this._navigate(this.createUrlTree(commands, segment));\n  }\n\n  /**\n   * @internal\n   */\n  dispose(): void { ObservableWrapper.dispose(this._locationSubscription); }\n\n  /**\n   * Applies an array of commands to the current url tree and creates\n   * a new url tree.\n   *\n   * When given a segment, applies the given commands starting from the segment.\n   * When not given a segment, applies the given command starting from the root.\n   *\n   * ### Usage\n   *\n   * ```\n   * // create /team/33/user/11\n   * router.createUrlTree(['/team', 33, 'user', 11]);\n   *\n   * // create /team/33;expand=true/user/11\n   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n   *\n   * // you can collapse static fragments like this\n   * router.createUrlTree(['/team/33/user', userId]);\n   *\n   * // assuming the current url is `/team/33/user/11` and the segment points to `user/11`\n   *\n   * // navigate to /team/33/user/11/details\n   * router.createUrlTree(['details'], segment);\n   *\n   * // navigate to /team/33/user/22\n   * router.createUrlTree(['../22'], segment);\n   *\n   * // navigate to /team/44/user/22\n   * router.createUrlTree(['../../team/44/user/22'], segment);\n   * ```\n   */\n  createUrlTree(commands: any[], segment?: RouteSegment): UrlTree {\n    let s = isPresent(segment) ? segment : this._routeTree.root;\n    return link(s, this._routeTree, this.urlTree, commands);\n  }\n\n  /**\n   * Serializes a {@link UrlTree} into a string.\n   */\n  serializeUrl(url: UrlTree): string { return this._urlSerializer.serialize(url); }\n\n  private _setUpLocationChangeListener(): void {\n    this._locationSubscription = this._location.subscribe(\n        (change) => { this._navigate(this._urlSerializer.parse(change['url']), change['pop']); });\n  }\n\n  private _navigate(url: UrlTree, preventPushState?: boolean): Promise<void> {\n    this._urlTree = url;\n    return recognize(this._componentResolver, this._rootComponentType, url, this._routeTree)\n        .then(currTree => {\n          return new _ActivateSegments(currTree, this._routeTree)\n              .activate(this._routerOutletMap, this._rootComponent)\n              .then(updated => {\n                if (updated) {\n                  this._routeTree = currTree;\n                  if (isBlank(preventPushState) || !preventPushState) {\n                    let path = this._urlSerializer.serialize(this._urlTree);\n                    if (this._location.isCurrentPathEqualTo(path)) {\n                      this._location.replaceState(path);\n                    } else {\n                      this._location.go(path);\n                    }\n                  }\n                  this._changes.emit(null);\n                }\n              });\n        });\n  }\n}\n\n\nclass _ActivateSegments {\n  private deactivations: Object[][] = [];\n  private performMutation: boolean = true;\n\n  constructor(private currTree: RouteTree, private prevTree: RouteTree) {}\n\n  activate(parentOutletMap: RouterOutletMap, rootComponent: Object): Promise<boolean> {\n    let prevRoot = isPresent(this.prevTree) ? rootNode(this.prevTree) : null;\n    let currRoot = rootNode(this.currTree);\n\n    return this.canDeactivate(currRoot, prevRoot, parentOutletMap, rootComponent).then(res => {\n      this.performMutation = true;\n      if (res) {\n        this.activateChildSegments(currRoot, prevRoot, parentOutletMap, [rootComponent]);\n      }\n      return res;\n    });\n  }\n\n  private canDeactivate(\n      currRoot: TreeNode<RouteSegment>, prevRoot: TreeNode<RouteSegment>,\n      outletMap: RouterOutletMap, rootComponent: Object): Promise<boolean> {\n    this.performMutation = false;\n    this.activateChildSegments(currRoot, prevRoot, outletMap, [rootComponent]);\n\n    let allPaths = PromiseWrapper.all(this.deactivations.map(r => this.checkCanDeactivatePath(r)));\n    return allPaths.then((values: boolean[]) => values.filter(v => v).length === values.length);\n  }\n\n  private checkCanDeactivatePath(path: Object[]): Promise<boolean> {\n    let curr = PromiseWrapper.resolve(true);\n    for (let p of ListWrapper.reversed(path)) {\n      curr = curr.then(_ => {\n        if (hasLifecycleHook('routerCanDeactivate', p)) {\n          return (<CanDeactivate>p).routerCanDeactivate(this.prevTree, this.currTree);\n        } else {\n          return _;\n        }\n      });\n    }\n    return curr;\n  }\n\n  private activateChildSegments(\n      currNode: TreeNode<RouteSegment>, prevNode: TreeNode<RouteSegment>,\n      outletMap: RouterOutletMap, components: Object[]): void {\n    let prevChildren = isPresent(prevNode) ? prevNode.children.reduce((m, c) => {\n      (m as any /** TODO #9100 */)[c.value.outlet] = c;\n      return m;\n    }, {}) : {};\n\n    currNode.children.forEach(c => {\n      this.activateSegments(\n          c, (prevChildren as any /** TODO #9100 */)[c.value.outlet], outletMap, components);\n      StringMapWrapper.delete(prevChildren, c.value.outlet);\n    });\n\n    StringMapWrapper.forEach(\n        prevChildren, (v: any /** TODO #9100 */, k: any /** TODO #9100 */) =>\n                          this.deactivateOutlet(outletMap._outlets[k], components));\n  }\n\n  activateSegments(\n      currNode: TreeNode<RouteSegment>, prevNode: TreeNode<RouteSegment>,\n      parentOutletMap: RouterOutletMap, components: Object[]): void {\n    let curr = currNode.value;\n    let prev = isPresent(prevNode) ? prevNode.value : null;\n    let outlet = this.getOutlet(parentOutletMap, currNode.value);\n\n    if (curr === prev) {\n      this.activateChildSegments(\n          currNode, prevNode, outlet.outletMap, components.concat([outlet.component]));\n    } else {\n      this.deactivateOutlet(outlet, components);\n      if (this.performMutation) {\n        let outletMap = new RouterOutletMap();\n        let component = this.activateNewSegments(outletMap, curr, prev, outlet);\n        this.activateChildSegments(currNode, prevNode, outletMap, components.concat([component]));\n      }\n    }\n  }\n\n  private activateNewSegments(\n      outletMap: RouterOutletMap, curr: RouteSegment, prev: RouteSegment,\n      outlet: RouterOutlet): Object {\n    let resolved = ReflectiveInjector.resolve(\n        [{provide: RouterOutletMap, useValue: outletMap}, {provide: RouteSegment, useValue: curr}]);\n    let ref = outlet.activate(routeSegmentComponentFactory(curr), resolved, outletMap);\n    if (hasLifecycleHook('routerOnActivate', ref.instance)) {\n      ref.instance.routerOnActivate(curr, prev, this.currTree, this.prevTree);\n    }\n    return ref.instance;\n  }\n\n  private getOutlet(outletMap: RouterOutletMap, segment: RouteSegment): RouterOutlet {\n    let outlet = outletMap._outlets[segment.outlet];\n    if (isBlank(outlet)) {\n      if (segment.outlet == DEFAULT_OUTLET_NAME) {\n        throw new BaseException(`Cannot find default outlet`);\n      } else {\n        throw new BaseException(`Cannot find the outlet ${segment.outlet}`);\n      }\n    }\n    return outlet;\n  }\n\n  private deactivateOutlet(outlet: RouterOutlet, components: Object[]): void {\n    if (isPresent(outlet) && outlet.isActivated) {\n      StringMapWrapper.forEach(\n          outlet.outletMap._outlets, (v: any /** TODO #9100 */, k: any /** TODO #9100 */) =>\n                                         this.deactivateOutlet(v, components));\n      if (this.performMutation) {\n        outlet.deactivate();\n      } else {\n        this.deactivations.push(components.concat([outlet.component]));\n      }\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}