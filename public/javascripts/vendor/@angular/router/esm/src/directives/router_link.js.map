{"version":3,"file":"router_link.js","sourceRoot":"","sources":["../../../../../../modules/@angular/router/src/directives/router_link.ts"],"names":[],"mappings":"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","sourcesContent":["import {LocationStrategy} from '@angular/common';\nimport {Directive, HostBinding, HostListener, Input, OnDestroy} from '@angular/core';\n\nimport {ObservableWrapper} from '../facade/async';\nimport {isArray, isPresent, isString} from '../facade/lang';\nimport {Router} from '../router';\nimport {RouteSegment} from '../segments';\nexport class RouterLink implements OnDestroy { target: string;\n  private _commands: any[] = [];\n  private _subscription: any; href: string; isActive: boolean = false;\n\n  constructor(\n      private _routeSegment: RouteSegment, private _router: Router,\n      private _locationStrategy: LocationStrategy) {\n    // because auxiliary links take existing primary and auxiliary routes into account,\n    // we need to update the link whenever params or other routes change.\n    this._subscription =\n        ObservableWrapper.subscribe(_router.changes, (_) => { this._updateTargetUrlAndHref(); });\n  }\n\n  ngOnDestroy() { ObservableWrapper.dispose(this._subscription); }\n  set routerLink(data: any[]|any) {\n    if (isArray(data)) {\n      this._commands = <any[]>data;\n    } else {\n      this._commands = [data];\n    }\n    this._updateTargetUrlAndHref();\n  }\n  onClick(button: number, ctrlKey: boolean, metaKey: boolean): boolean {\n    if (button != 0 || ctrlKey || metaKey) {\n      return true;\n    }\n\n    if (isString(this.target) && this.target != '_self') {\n      return true;\n    }\n\n    this._router.navigate(this._commands, this._routeSegment);\n    return false;\n  }\n\n  private _updateTargetUrlAndHref(): void {\n    let tree = this._router.createUrlTree(this._commands, this._routeSegment);\n    if (isPresent(tree)) {\n      this.href = this._locationStrategy.prepareExternalUrl(this._router.serializeUrl(tree));\n      this.isActive = this._router.urlTree.contains(tree);\n    } else {\n      this.isActive = false;\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[routerLink]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: RouteSegment, },\n{type: Router, },\n{type: LocationStrategy, },\n];\n/** @nocollapse */\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'target': [{ type: Input },],\n'href': [{ type: HostBinding },],\n'isActive': [{ type: HostBinding, args: ['class.router-link-active', ] },],\n'routerLink': [{ type: Input },],\n'onClick': [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey'], ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}