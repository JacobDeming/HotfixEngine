{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/config.ts"],"names":[],"mappings":"OAAO,EAAC,iBAAiB,EAAC,MAAM,eAAe;OAExC,EAAC,aAAa,EAAC,MAAM,0BAA0B;OAC/C,EAAO,iBAAiB,EAAU,MAAM,oBAAoB;OAG5D,EAAC,WAAW,EAAC,MAAM,eAAe;AAEzC;IASE,YACI,EAAC,WAAW,GAAG,IAAI,kBAAkB,EAAE,EAAE,oBAAoB,GAAG,iBAAiB,CAAC,QAAQ,EACzF,YAAY,GAAG,iBAAiB,EAAE,EAAE,gBAAgB,GAAG,iBAAiB,EAAE,EAAE,MAAM,GAAG,IAAI,EACzF,kBAAkB,GAAG,EAAE,EAAE,aAAa,GAAG,EAAE,EAAC,GAQzC,EAAE;QACR,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH;IACE,IAAI,QAAQ,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IACrE,IAAI,UAAU,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IACvE,IAAI,aAAa,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IAC1E,IAAI,aAAa,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IAC1E,IAAI,UAAU,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IACvE,IAAI,WAAW,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AAC1E,CAAC;AAED;IAAA;QACE,aAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QAChC,eAAU,GAA0B,IAAI,CAAC;QACzC,kBAAa,GAA0B,IAAI,CAAC;QAC5C,kBAAa,GAA0B,IAAI,CAAC;QAC5C,eAAU,GAA0B,IAAI,CAAC;QACzC,gBAAW,GAA0B,IAAI,CAAC;IAC5C,CAAC;AAAD,CAAC;AAAA","sourcesContent":["import {ViewEncapsulation} from '@angular/core';\n\nimport {unimplemented} from '../src/facade/exceptions';\nimport {Type, assertionsEnabled, isBlank} from '../src/facade/lang';\n\nimport {CompileIdentifierMetadata} from './compile_metadata';\nimport {Identifiers} from './identifiers';\n\nexport class CompilerConfig {\n  public renderTypes: RenderTypes;\n  public defaultEncapsulation: ViewEncapsulation;\n  public genDebugInfo: boolean;\n  public logBindingUpdate: boolean;\n  public useJit: boolean;\n  public platformDirectives: any[];\n  public platformPipes: any[];\n\n  constructor(\n      {renderTypes = new DefaultRenderTypes(), defaultEncapsulation = ViewEncapsulation.Emulated,\n       genDebugInfo = assertionsEnabled(), logBindingUpdate = assertionsEnabled(), useJit = true,\n       platformDirectives = [], platformPipes = []}: {\n        renderTypes?: RenderTypes,\n        defaultEncapsulation?: ViewEncapsulation,\n        genDebugInfo?: boolean,\n        logBindingUpdate?: boolean,\n        useJit?: boolean,\n        platformDirectives?: any[],\n        platformPipes?: any[]\n      } = {}) {\n    this.renderTypes = renderTypes;\n    this.defaultEncapsulation = defaultEncapsulation;\n    this.genDebugInfo = genDebugInfo;\n    this.logBindingUpdate = logBindingUpdate;\n    this.useJit = useJit;\n    this.platformDirectives = platformDirectives;\n    this.platformPipes = platformPipes;\n  }\n}\n\n/**\n * Types used for the renderer.\n * Can be replaced to specialize the generated output to a specific renderer\n * to help tree shaking.\n */\nexport abstract class RenderTypes {\n  get renderer(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderText(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderElement(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderComment(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderNode(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderEvent(): CompileIdentifierMetadata { return unimplemented(); }\n}\n\nexport class DefaultRenderTypes implements RenderTypes {\n  renderer = Identifiers.Renderer;\n  renderText: any /** TODO #9100 */ = null;\n  renderElement: any /** TODO #9100 */ = null;\n  renderComment: any /** TODO #9100 */ = null;\n  renderNode: any /** TODO #9100 */ = null;\n  renderEvent: any /** TODO #9100 */ = null;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}