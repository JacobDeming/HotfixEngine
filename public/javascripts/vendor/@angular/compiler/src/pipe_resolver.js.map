{"version":3,"file":"pipe_resolver.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/pipe_resolver.ts"],"names":[],"mappings":";AAAA,qBAA0D,eAAe,CAAC,CAAA;AAE1E,6BAAyC,iBAAiB,CAAC,CAAA;AAC3D,2BAA4B,0BAA0B,CAAC,CAAA;AACvD,qBAAyC,oBAAoB,CAAC,CAAA;AAE9D,yBAAyB,IAAS;IAChC,MAAM,CAAC,IAAI,YAAY,mBAAY,CAAC;AACtC,CAAC;AACD;IAEE,sBAAY,UAA4B;QACtC,EAAE,CAAC,CAAC,gBAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC/B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,UAAU,GAAG,wBAAS,CAAC;QAC9B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,8BAAO,GAAP,UAAQ,IAAU;QAChB,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,wBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QACjE,EAAE,CAAC,CAAC,gBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC7C,EAAE,CAAC,CAAC,gBAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,UAAU,CAAC;YACpB,CAAC;QACH,CAAC;QACD,MAAM,IAAI,0BAAa,CAAC,gCAA8B,gBAAS,CAAC,IAAI,CAAG,CAAC,CAAC;IAC3E,CAAC;IACH,kBAAkB;IACX,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,2BAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,8BAAe,GAAG;KACxB,CAAC;IACF,mBAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,oBAAY,eA+BxB,CAAA;AAEU,6BAAqB,GAAG,IAAI,YAAY,CAAC,wBAAS,CAAC,CAAC","sourcesContent":["import {Injectable, PipeMetadata, resolveForwardRef} from '@angular/core';\n\nimport {ReflectorReader, reflector} from '../core_private';\nimport {BaseException} from '../src/facade/exceptions';\nimport {Type, isPresent, stringify} from '../src/facade/lang';\n\nfunction _isPipeMetadata(type: any): boolean {\n  return type instanceof PipeMetadata;\n}\nexport class PipeResolver {\n  private _reflector: ReflectorReader;\n  constructor(_reflector?: ReflectorReader) {\n    if (isPresent(_reflector)) {\n      this._reflector = _reflector;\n    } else {\n      this._reflector = reflector;\n    }\n  }\n\n  /**\n   * Return {@link PipeMetadata} for a given `Type`.\n   */\n  resolve(type: Type): PipeMetadata {\n    var metas = this._reflector.annotations(resolveForwardRef(type));\n    if (isPresent(metas)) {\n      var annotation = metas.find(_isPipeMetadata);\n      if (isPresent(annotation)) {\n        return annotation;\n      }\n    }\n    throw new BaseException(`No Pipe decorator found on ${stringify(type)}`);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ReflectorReader, },\n];\n}\n\nexport var CODEGEN_PIPE_RESOLVER = new PipeResolver(reflector);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}